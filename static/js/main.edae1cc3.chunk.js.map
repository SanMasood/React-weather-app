{"version":3,"sources":["components/location-details.js","components/forecast-details.js","components/forecast-summary.js","components/forecast-summaries.js","components/search-form.js","components/app.jsx","serviceWorker.js","index.js"],"names":["LocationDetails","props","className","city","country","ForecastDetails","data-testid","moment","forecast","date","format","temperature","max","min","humidity","wind","speed","direction","toUpperCase","ForecastSummary","name","iconId","icon","description","onClick","onSelect","ForecastSummaries","forecasts","map","key","onForecastSelect","SearchForm","useState","searchText","setSearchText","type","onChange","event","target","value","placeholder","onCitySearch","axios","require","App","selectedDate","setSelectedDate","setForecasts","location","setLocation","useEffect","length","get","then","res","data","catch","err","alert","selectedForecast","find","request","toLowerCase","Boolean","window","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.edae1cc3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LocationDetails = props => <h1 className=\"locationDetailsClass\" >\n    {props.city}, {props.country}\n    </h1>\n\nLocationDetails.propTypes ={\n    city: PropTypes.string.isRequired,\n    country: PropTypes.string.isRequired,\n\n}\n\n/*LocationDetails.defaultProps ={\n    city: \"London\",\n    country : \"United Kingdom\",\n}*/\n\nexport default LocationDetails;\n","import React from 'react';\n//import ForecastSummary from './forecast-summary';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\n\nconst ForecastDetails = (props) => (\n    \n    <div className=\"FDClass\">\n\n    <div className=\"forecast-details-date\" data-testid=\"date-id\"><h3>\n    {moment(props.forecast.date).format('ddd Do MMM')}</h3></div>\n\n    <div className=\"forecast-details-max-temp\" data-testid=\"max-temp-id\">\n    <b>Max Temperature:</b> {props.forecast.temperature.max} °C</div>\n\n    <div className=\"forecast-details-min-temp\" data-testid=\"min-temp-id\">\n    <b>Min Temperature:</b> {props.forecast.temperature.min} °C</div>\n            \n    <div className=\"forecast-details-humidity\" data-testid=\"humidity-id\">\n    <b>Humidity: </b>{props.forecast.humidity}%</div>   \n\n    <div className=\"wind-speed\" data-testid=\"wind-speed-id\">\n    <b>Wind: </b>{props.forecast.wind.speed} mph due {props.forecast.wind.direction.toUpperCase()}</div>          \n        \n    </div>\n)\n\nForecastDetails.propTypes = {\n    forecast: PropTypes.shape({\n        date: PropTypes.string.isRequired,\n        temperature: PropTypes.object.isRequired,\n        humidity: PropTypes.string.isRequired,\n        wind: PropTypes.object.isRequired,\n    }),\n};    \nexport default ForecastDetails;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport WeatherIcon from 'react-icons-weather';\nimport moment from 'moment';\n\nimport '../styles/forecast-summaries.css';\nimport '../styles/buttons.css';\n\n\nconst ForecastSummary = (props) =>\n\n{\n    return (\n        <div className=\"FCClass\">\n        \n        <div className=\"forecast-summary-date\" data-testid=\"date-id\">\n        <span>{moment(props.date).format('ddd Do MMM')}</span></div>\n\n        <div className=\"temperature\" data-testid=\"temperature-id\">{props.temperature} °C</div>\n\n        <div className=\"forecast-summary-icon\" data-testid=\"icon-id\"> <WeatherIcon name=\"owm\" iconId={props.icon} \n        />\n        </div>\n\n        <div className=\"description\" data-testid=\"description-id\">{props.description} </div>        \n\n        <button className=\"button1\" onClick ={ () => props.onSelect(props.date)}>\n            More        \n        </button> \n        \n</div>\n    )\n}\n\nForecastSummary.propTypes ={\n    date: PropTypes.number.isRequired,\n    icon: PropTypes.string.isRequired,\n    temperature: PropTypes.number.isRequired,\n    description: PropTypes.string.isRequired,\n}\n\nexport default ForecastSummary;","import React from 'react';\nimport ForecastSummary from './forecast-summary';\nimport PropTypes from 'prop-types';\nimport '../styles/forecast-summaries.css';\n\n\nconst ForecastSummaries = props => (\n    <div className=\"forecastSummaries\">\n{\n    props.forecasts.map(forecast=> (\n        <ForecastSummary\n        key={forecast.date}\n        date={forecast.date}\n        icon={forecast.icon}\n        description={forecast.description}\n        temperature={forecast.temperature.max}\n        onSelect={props.onForecastSelect}\n        />\n    ))\n}\n\n    </div>\n);\nForecastSummaries.propTypes = {\n    forecasts: PropTypes.array.isRequired,\n}\n\nexport default ForecastSummaries;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst SearchForm = props => {\nconst [searchText, setSearchText] = useState('');\n\nconst handleInputChange = event => {\n    setSearchText(event.target.value);\n}\n\nreturn (\n<div className=\"searchForm\">\n    <span><b>Enter City:</b> <input type=\"text\" className=\"city-search\" onChange={ handleInputChange }\n    placeholder=\"Type city here\" value={searchText}/> </span>\n\n    <span><button className=\"button1\" type=\"submit\" onClick={() => props.onCitySearch(searchText)}>Go </button></span>\n\n</div>\n);\n}\n\nSearchForm.propTypes = {\n    onCitySearch: PropTypes.func.isRequired,\n}\nexport default SearchForm;","\nimport LocationDetails from './location-details'\nimport ForecastDetails from './forecast-details'\nimport ForecastSummaries from './forecast-summaries'\nimport SearchForm from './search-form'\n\nimport '../styles/app.css'\nimport '../styles/forecast-summaries.css'\nimport '../styles/buttons.css'\n\n\n\nimport React, { useState, useEffect } from 'react';\nconst axios = require('axios');\n\nconst App = () => {\n\nconst [selectedDate, setSelectedDate] = useState(0); //starting value\nconst [forecasts, setForecasts] = useState([]);\nconst [location, setLocation] = useState({\n    city: '',\n    country: '',\n});\n\nuseEffect (() => { \n    if (forecasts.length===0){\n    axios\n    .get('https://mcr-codes-weather.herokuapp.com/forecast')\n    .then((res) => {\n        setForecasts(res.data.forecasts);\n        setLocation(res.data.location);\n    })\n    .catch(err => {\n        alert('Error loading Weather');\n    })\n}\n});\n\nconst citySearch = (city) => {\n    const request = city.toLowerCase();\n    axios\n      .get('https://mcr-codes-weather.herokuapp.com/forecast?city=' + request)\n      .then((res) => {\n        setForecasts(res.data.forecasts);\n        setLocation(res.data.location);\n      })\n      .catch((err) => {\n          alert('Please enter valid city name.')\n      })\n}\n\nconst selectedForecast = forecasts.find(forecast => forecast.date === selectedDate);\n\nconst handleForecastSelect = (date) => {setSelectedDate(date);}\n\nreturn (\n    \n<div className=\"forecast\" >\n\n<LocationDetails \ncity={location.city} \ncountry={location.country} />\n\n<SearchForm \nonCitySearch = {citySearch}\n />\n\n<ForecastSummaries forecasts = {forecasts} \nonForecastSelect={handleForecastSelect}  />\n\n{\n    selectedForecast && (<ForecastDetails forecast = {selectedForecast} />)\n}\n</div>\n\n);\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\n//import './index.css';\nimport App from './components/app';\n\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n    <App  />, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}